FROM nvidia/cuda:11.4.0-devel-ubuntu20.04

ENV DEBIAN_FRONTEND noninteractive
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES graphics,utility,compute


# Install some basic utilities
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    sudo \
    git \
    bzip2 \
    libx11-6 \
    python3 \
    python3-dev \
    python3.9 \
    python3.9-dev \
    python3-pip \
    cmake \
    wget \
    tar \
    libx11-dev \
    xorg-dev \
    libssl-dev \
    build-essential \
    tmux \
    libusb-1.0-0-dev && apt-get clean && rm -rf /var/lib/apt/lists/*



# Install miniconda
#ENV CONDA_DIR /opt/conda
#RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \
#     /bin/bash ~/miniconda.sh -b -p /opt/conda

# Put conda in path so we can use conda activate
#ENV PATH=$CONDA_DIR/bin:$PATH


RUN apt-get update && \
    apt-get install -y software-properties-common && \
    rm -rf /var/lib/apt/lists/*
RUN apt-add-repository universe
RUN apt-add-repository multiverse
RUN apt-add-repository restricted

RUN pip install torch==1.12.1+cu113 torchvision==0.13.1+cu113 torchaudio==0.12.1 --extra-index-url https://download.pytorch.org/whl/cu113
RUN pip install 'git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI'
RUN pip install opencv-python

RUN git clone https://github.com/facebookresearch/detectron2.git &&  cd detectron2 && ls && pip install -e .
RUN pip install fvcore iopath
RUN curl -LO https://github.com/NVIDIA/cub/archive/1.10.0.tar.gz
RUN tar xzf 1.10.0.tar.gz
ENV CUB_HOME=$PWD/cub-1.10.0
RUN pip install --no-index --no-cache-dir pytorch3d -f https://dl.fbaipublicfiles.com/pytorch3d/packaging/wheels/py38_cu113_pyt1120/download.html
RUN pip install cython scipy seaborn open3d 


# Install ROS
ARG ROS_DISTRO=foxy
ARG INSTALL_PACKAGE=desktop

RUN apt-get update -q && \
    apt-get install -y curl gnupg2 lsb-release && \
    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null && \
    apt-get update -q && \
    apt-get install -y gosu ros-${ROS_DISTRO}-${INSTALL_PACKAGE} \
    python3-argcomplete \
    python3-colcon-common-extensions \
    python3-rosdep python3-vcstool \
    ros-${ROS_DISTRO}-navigation2 \
    ros-${ROS_DISTRO}-nav2-bringup \
     '~ros-${ROS_DISTRO}-turtlebot3-.*' \
    ros-${ROS_DISTRO}-gazebo-ros-pkgs && \
    rosdep init && \
    rm -rf /var/lib/apt/lists/*



# Install our code

RUN apt-get update && \
    apt-get install -y nlohmann-json3-dev libgtest-dev libeigen3-dev vim ros-foxy-tf-transformations \
    ros-foxy-pcl-conversions ros-foxy-pcl-msgs ros-foxy-pcl-ros && \
    rm -rf /var/lib/apt/lists/*

RUN pip install transforms3d 
WORKDIR /SIMP
COPY ncore ncore
COPY ros2_ws ros2_ws
#RUN cd ncore && mkdir build && cd build && cmake .. -DBUILD_TESTING=1 && make -j12 
SHELL ["/bin/bash", "-c"]
#RUN cd ros2_ws && \
#    . /opt/ros/foxy/setup.bash && \
#    colcon build

COPY ros2_entrypoint.sh /
RUN chmod +x /ros2_entrypoint.sh
ENTRYPOINT ["/ros2_entrypoint.sh"]
CMD ["bash"]